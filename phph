#!/bin/bash

#ref: https://github.com/Epiconcept-Paris/infra-notes/blob/master/cgd/rst/20190527_envoi_de_mails_qui_n'arrivent_pas.rst

#todo : intégrer un blocage de double exec, via https://ma.ttias.be/prevent-cronjobs-from-overlapping-in-linux/ par ex ? 
#todo : détecter que le fichier log php n'est pas accessible à www-data
#todo : passer les infos php->bash autrement que via /tmp

ABS=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
log=/var/log/epiconcept/phph.log
date=$(date +%F_%Hh%Mm%Ss)
params="$@"
pid=$$
path=$(printenv |grep '^PATH=')
script=$(realpath $1)
sep='\\'
fallbackphplog=/space/log/apps/php_errors_cron.log

echo "$date;$pid;begin;$params ($script)" >> $log

# gestion du tag, si présent
if [ ! -z "$SUDO_USER" ]; then runmode=cli; else runmode=cron; fi
if [ ! -z "$TAG" ]; then TAG="[$runmode:$TAG] "; else TAG="[$runmode] "; fi
# si APP n'est pas défini, et si le chemin le permet, on devine l'application pour le log d'erreur dédié
if [ -z "$APP" ]; then 
	if [[ "$script" =~ ^/space/www/apps/([-_a-zA-Z0-9]*)/ ]]; then 
		APP=${BASH_REMATCH[1]}
	fi
fi

#on note les paramètres dans le log, et juste avant on applique les valeurs par défaut s'ils sont vides
declare -A mapParams
mapParams[MAILTO]=cedric@epiconcept.fr
mapParams[MAILFROM]=infra@epiconcept.fr
mapParams[APP]=undefined
mapParams[label]="crontab $params"
if [ -z "$APP" ]; then
	echo "$date;$pid;error;variable APP non définie pour script $script" >> $log
	mapParams[errorlog]=$fallbackphplog
else
	mapParams[errorlog]="/space/applisdata/$APP/php_errors_cron.log"
fi

s="$date;$pid;params;"
for i in PATH MAILTO MAILFROM TAG LOGNAME label APP errorlog SUDO_USER runmode; do 
	if [ ! -z "${mapParams[$i]}" ] && [ -z "${!i}" ]; then printf -v "$i" "%s" "${mapParams[$i]}"; fi
	s="$s$i=${!i}$sep"
done
echo $s >> $log

if [ ! -f "$errorlog" ]; then sudo -u www-data touch $errorlog 2>/dev/null; fi
if [ ! -f "$errorlog" ]; then 
	echo "$date;$pid;error;fichier $errorlog non existant pour script $script (app: $APP)" >> $log
	errorlog=$fallbackphplog
fi

if [ ! -f "$script" ]; then
	echo "$date;$pid;error;script absent ($script)" >> $log
fi

# gestion du prepend si présent
prevprepend=$(php -i | grep auto_prepend_file | sed 's/.* => //g')

# appel en fixant le prepend et le fichier de retour des informations
tmpfile=$(sudo -u www-data tempfile)
execresult=$(sudo -u www-data commtempfile=$tmpfile prepend=$prevprepend php \
	-d auto_prepend_file=$ABS/phph_prepend.php -d auto_append_file=$ABS/phph_append.php \
	-d display_errors=1 -d log_errors=1 -d error_log=$errorlog \
	$params 2>&1)
rc=$?
#-d error_prepend_string="($script (phph pid:$pid))"

if [ ! -z "$execresult" ]; then
	echo -e "$execresult\n---\njournal PHP: $errorlog" | mail -s "${TAG}$label (rc:$rc)" -a "From: $MAILFROM" $MAILTO
fi
if [ ! -s "$tmpfile" ]; then
	echo "$date;$pid;error;resultat via PHP vide ($script), sans doute un exit(0)" >> $log
fi

date=$(date +%F_%Hh%Mm%Ss)
echo "$date;$pid;results;rc=$rc$sep$(cat $tmpfile)" >> $log
echo "$date;$pid;fin;$params" >> $log

# nettoyage
rm $tmpfile
